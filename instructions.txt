Front-end: HTML, CSS, Javascript, Jquery(library)
Back-end: python, Django(framework)

Django - it's web framework
framework 
- it is built combining all the best practices
- it defines a way of doind
- django is opionated

HTTP - Hyper text tranfer protocol
methods - GET, POST, PUT, DELETE,..

module - library - Package(modules divided into sub modules)

Python Package management
- pip
Eg: pip install jupyter
Eg: pip install numpy
Eg: pip install scipy
Eg: pip install venv

venv - virtual environment
- module1 version:x.y.z
- module2 version:x2.y2.z2

if your system has more than 1 project
project1(which i'm currently developing)(3.0.3)(migrating-shd be carefully done)(otherwise it'll break)
django-pro(which we are just starting)


TODO
1.To install virtual env module
    >>>pip install virtualenv

2.create a folder django in your working directory
    >>>mkdir django
3.cd to django(and open it in vscode)
    >>>cd django
4.Creating a virtual env for our project
    >>>pip -m venv "django-venv"

5.For activating virtual env run below command
    >>>django-venc\scripts\activate
    output:
    (django-venv) C:\Users\........\django>

6.For installing DJANGO in our newly created virtual environment
    >>>pip install django
7.To test installation run
    >>>django-admin --version
    output: 3.0.5

8.Starting a django project
    >>>django-admin startproject demo

9.change directory to demo
    >>>cd demo
10.Running server
    >>> python manage.py runserver


29/04
creating a posts app
>>> python manage.py startapp posts

Now create two view functions inside posts' views.py file and setup do url configuration
1. create function home() which takes request as argument and should return HttpResponse object. 
2. similary create about() 
3. Then create urls.py in posts app and copy contents of main urls.py file.
4. Then modify newly created urls.py and create paths to the about created home() and about() view functions
5. Run to test


30/04/2020
Templates 
- serving html pages throught templates
  -home.html,about.html
- base templates/ extends a templates

Template tags
  - block tag
  {% block block_name %}
  {% endblock block_name %}
  - extends tag
  {% extends 'path/to/the/file' %}
  - for tag



Admin site
  for migrating database tables
    1. python manage.py makemigrations - to create migrations - creating queries for table creation
    2. python manager.py migrate - applying migrations - executing those queries
  - creating super user
    - python manage.py createsuperuser

Creating a Post model
 - in the models.py in posts app
 - after creating the Post model class inside models.py run migration commands

To register that post in admin site
 - add below line to the admin.py
    admin.site.register(Model_name)  


Django Shell
To open django Shell
  >>> python manage.py shell
parellely also see admin

DBMS - Database management system - to provide a way to organise and store data
Eg: Oracle, Mysql, sqlite..etc
database we are using is sqlite3-RDBMS(Relational DBMS)
RDMBS -> Tables -> columns and rows -> 
eg:table - student register, columns -> Rollno,Name, rows-> records of each student

To create tables in sqlite DB we need to use SQL language
to create student register table query needed to be executed
>>> CREATE TABLE student_register (rollno Integer, name varchar);


ORM - Object Relational Mapping
DBMS <-> ORM <-> python


Static files 
  static > posts > css
                 > js
                 > img

after placing static files in the static folder.
To make changes effective 
> 1. You need to restart the server
> 2. do hard refresh(ctrl+click or ctrl+f5)
> 3. you might need to restart vscode
> 4. delete all cookies


User registration page 
> 1. add path to /register
> 2. create users app(python manager.py startapp users) and add it to the settings.py
> 3. inside users/views.py create register view
> 4. create template register.html in users app
> 5. add code in register view to handle registration form input
> 6. create forms.py in users app to have email field in our form


Login and Logout Functionality

> after successful Login. request objet will have user object in it

> create login.html and logout.html templates/users
> change main urls.py to handle login/ and logout/ routes
> change base.html <nav> bar to display user name when he is logged in 
> also show "Login" nav item when user is logged out and "Logout" nav item when user is logged in
> make home accessible only when user is logged in


Profile setup
>model - user -> users app

Create profile on user creation
> Signals(js events eg.btn click)
  > create signals.py in users app
  > define two receiver functions - create_profile and save_profile
  > add code to the functions


Create post
> in home.html(posts app) create a card with a link to the createPost view
> create CreatePostForm with two fields to be listed in the form and override save() method to set author
> create createPost view and write code in it
> create path to the createPost view in urls.py(posts app)


Built-in filters and Custom Filter
> add, cut, first, last, join, lower, upper, length, default, random, wordcount, date

Custome filters and tags
To create and use custom filters and tags
> create templatetags directory in posts app
> create posts_extras in the created directory
> in settings.py in TEMPLATE>OPTIONS>libraries 
   - create a key-value pair as tag library and path of the tag library
> in posts_extras.py add code for the tags and filters you want to create

> To import this tag library use {% load <taglibraryname> %} in the template


Pagination of home page

Query parameters
<scheme>://<authority>/path/?key1=value1&key2=value2

http://localhost:8000/home/?page=7

> Learn about Paginator and Page object using shell
> change home view code in view.py of posts app to implement pagination
> change home.html template to display pagination at the bottom


DELETE POST & PROHIBITING USERS FROM UNAUTHORISED ACCESS
> change code to show button only for the authorised users
> Add path to delete Post in urls.py
> add deletePost in views.py
> Add code in the deletePost view to delete post 
