Front-end: HTML, CSS, Javascript, Jquery(library)
Back-end: python, Django(framework)

Django - it's web framework
framework 
- it is built combining all the best practices
- it defines a way of doind
- django is opionated

HTTP - Hyper text tranfer protocol
methods - GET, POST, PUT, DELETE,..

module - library - Package(modules divided into sub modules)

Python Package management
- pip
Eg: pip install jupyter
Eg: pip install numpy
Eg: pip install scipy
Eg: pip install venv

venv - virtual environment
- module1 version:x.y.z
- module2 version:x2.y2.z2

if your system has more than 1 project
project1(which i'm currently developing)(3.0.3)(migrating-shd be carefully done)(otherwise it'll break)
django-pro(which we are just starting)


TODO
1.To install virtual env module
    >>>pip install virtualenv

2.create a folder django in your working directory
    >>>mkdir django
3.cd to django(and open it in vscode)
    >>>cd django
4.Creating a virtual env for our project
    >>>pip -m venv "django-venv"

5.For activating virtual env run below command
    >>>django-venc\scripts\activate
    output:
    (django-venv) C:\Users\........\django>

6.For installing DJANGO in our newly created virtual environment
    >>>pip install django
7.To test installation run
    >>>django-admin --version
    output: 3.0.5

8.Starting a django project
    >>>django-admin startproject demo

9.change directory to demo
    >>>cd demo
10.Running server
    >>> python manage.py runserver


29/04
creating a posts app
>>> python manage.py startapp posts


30/04/2020
Templates 
- serving html pages throught templates
  -home.html,about.html
- base templates/ extends a templates

Template tags
  - block tag
  {% block block_name %}
  {% endblock block_name %}
  - extends tag
  {% extends 'path/to/the/file' %}
  - for tag



Admin site
  for migrating database tables
    1. python manage.py makemigrations - to create migrations - creating queries for table creation
    2. python manager.py migrate - applying migrations - executing those queries
  - creating super user
    - python manage.py createsuperuser

Creating a Post model
 - in the models.py in posts app
 - after creating the Post model class inside models.py run migration commands

To register that post in admin site
 - add below line to the admin.py
    admin.site.register(Model_name)  



Profile setup(forms)
> create ProfileUpdateForm and UserUpdateForm in forms.py
> modify profile view to include above created forms
> modify profile.html template to deal with above created forms
> base.html updated with bootstrap classes
> forms docs : https://docs.djangoproject.com/en/3.0/topics/forms/
